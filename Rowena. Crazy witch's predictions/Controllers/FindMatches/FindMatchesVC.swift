//
//  FindMatchesVC.swift
//  Rowena. Crazy witch's predictions
//
//  Created by Eduard Sinyakov on 17/05/2019.
//  Copyright ¬© 2019 Eduard Sinyakov. All rights reserved.
//

import UIKit

class FindMatchesVC: BasedViewController {
    
    var timer = Timer()
    
    @IBOutlet weak var timerLabel: UILabel!
    // –º–æ–¥–µ–ª—å –∫–∞—Ä—Ç
    var model = CardModel()
    // –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    var cardArray = [Card]()
    
    @IBOutlet weak var pointsLabel: UILabel!
    
    @IBOutlet weak var collectionView: UICollectionView!
    
    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –∫–∞—Ä—Ç–∞ –∏–ª–∏ –Ω–µ—Ç
    var firstCardIsFlippedIndex: IndexPath?
    
    var secondsForTimer = 50
    var currentPoints = 0

    override func viewDidLoad() {
        super.viewDidLoad()
        
        collectionView.delegate = self
        collectionView.dataSource = self
        
        collectionView.layer.cornerRadius   = 10
        collectionView.layer.borderWidth    = 3
        collectionView.layer.borderColor    = #colorLiteral(red: 0.7296833396, green: 0.4263688922, blue: 0.0730580762, alpha: 1)
        collectionView.clipsToBounds        = true
        
        
        cardArray = model.getCardSixteenCards()

        timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(timerFunc), userInfo: nil, repeats: true)
        
    }// ednOfViewDidLoad
    
    override func viewWillAppear(_ animated: Bool) {
        navigationController?.isNavigationBarHidden = true
    }
    
    @objc func timerFunc() {
        
        pointsLabel.text = String(currentPoints)
        
        if secondsForTimer > 0 {
            
            secondsForTimer -= 1
            let seconds = String(format: "%d", secondsForTimer)
            timerLabel.text = seconds
            
            if pointsLabel.text == "1600" {
                performSegue(withIdentifier: "toEndVC", sender: self)
                timer.invalidate()
            }
            
        }
        
        
        
        if secondsForTimer == 0  {
            performSegue(withIdentifier: "toEndVC", sender: self)
            timer.invalidate()
        }
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "toEndVC" {
            let dvc = segue.destination as! EndOFFindMatchesVC
            
            if currentPoints ==  1600 {
               dvc.text = "You'r win!"
            } else {
                dvc.text = "You'r lose üòï"
            }
            
        }
    }
    
    
}

extension FindMatchesVC: UICollectionViewDelegate, UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        
        return cardArray.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Cell", for: indexPath) as! FindMatchesCell
        
        let card = cardArray[indexPath.row]
        // —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤ —Ñ—Ä–æ–Ω—Ç –∏–º—ç–¥–∂ –≤ –∫–æ–ª–ª–µ–∫—à–≤—å—é–°–µ–ª–ª (—è—á–µ–π–∫–∞)
        cell.setCard(card)
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        let cell = collectionView.cellForItem(at: indexPath) as! FindMatchesCell
        
        // –∫–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª —é–∑–µ—Ä
        let card = cardArray[indexPath.row]
        
        
        
        if card.isFlipped == false && card.isMatched == false{
            cell.flip()
            // –∑–≤—É–∫
            
            // —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–≤–æ—ã–π —Å—Ç–∞—Ç—É—Å
            card.isFlipped = true
            
            // –≤—ã—è—Å–Ω–∏—Ç—å —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ç—Ä–∞ –∏–ª–∏ –≤—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã?
            if firstCardIsFlippedIndex == nil {
                // —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞
                firstCardIsFlippedIndex = indexPath
                
            } else {
                // —ç—Ç–æ –≤—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞
                checkForMatches(indexPath)
            }
            
        }
        
        
        
    } // –∫–æ–Ω–µ—Ü –¥–∏–¥–°–µ–ª–µ–∫—Ç–ê–π—Ç–µ–º
    
    // MARK: –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
    func checkForMatches(_ secondCardIsFlippedIndex: IndexPath) {
        // —è—á–µ–π–∫–∏ –¥–ª—è –¥–≤—É—Ö –∫–∞—Ä—Ç
        let cardOneCell = collectionView.cellForItem(at: firstCardIsFlippedIndex!) as? FindMatchesCell
        
        let cardTwoCell = collectionView.cellForItem(at: secondCardIsFlippedIndex) as? FindMatchesCell
        
        // –∫–∞—Ä—Ç—ã –¥–ª—è –¥–≤—É—Ö –∫–∞—Ä—Ç
        let cardOne = cardArray[firstCardIsFlippedIndex!.row]
        let cardTwo = cardArray[secondCardIsFlippedIndex.row]
        
        if cardOne.imageName == cardTwo.imageName {
            // —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
           
            // —Å—Ç–∞—Ç—É—Å—ã –∫–∞—Ä—Ç
            cardOne.isMatched = true
            cardTwo.isMatched = true
            
            
            // —É–±—Ä–∞—Ç—å –∏–∑ –∫–æ–ª–ª–µ–∫—à–Ω –≤—å—é
            cardOneCell?.remove()
            cardTwoCell?.remove()
            
            currentPoints += 200
            
            pointsLabel.text = String(currentPoints)
            
        } else {
            //–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            
            // —Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç
            cardOne.isFlipped = false
            cardTwo.isFlipped = false
            
            // —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç—ã
            cardOneCell?.flipBack()
            cardTwoCell?.flipBack()
            
        }
        
        if cardOneCell == nil {
            collectionView.reloadItems(at: [firstCardIsFlippedIndex!])
        }
        
        // –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        firstCardIsFlippedIndex = nil
        }
    }
    
    

